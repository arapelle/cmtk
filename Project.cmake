
include(${CMAKE_CURRENT_LIST_DIR}/Utility.cmake)

function(disable_in_source_build)
    file(REAL_PATH ${CMAKE_SOURCE_DIR} cmake_src_dir EXPAND_TILDE)
    file(REAL_PATH ${CMAKE_BINARY_DIR} cmake_bin_dir EXPAND_TILDE)
    string(FIND "${cmake_bin_dir}" "${cmake_src_dir}" index)
    if(${index} EQUAL 0)
        set(msg_details "CMAKE_SOURCE_DIR: ${CMAKE_SOURCE_DIR}\nCMAKE_BINARY_DIR: ${CMAKE_BINARY_DIR}")
        message(FATAL_ERROR "In source build is disabled!\nCMAKE_BINARY_DIR must not be located in CMAKE_SOURCE_DIR!\n${msg_details}")
    endif()
endfunction()

function(set_build_type_ifndef)
    if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
      message(STATUS "Setting build type to 'Release' as none was specified.")
      set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose the type of build." FORCE)
      set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
    endif()
endfunction()

function(generate_package_config_file_beginning package_config_file export_names)
    set(content "@PACKAGE_INIT@

")
    foreach(export_name ${export_names})
        string(APPEND content "include(\${CMAKE_CURRENT_LIST_DIR}/${export_name}.cmake)
")
    endforeach()
    file(WRITE ${package_config_file} ${content})
endfunction()

function(generate_package_config_file_end package_config_file package_name)
    file(APPEND ${package_config_file} "check_required_components(${package_name})
")
endfunction()

function(generate_basic_package_config_file package_config_file package_name export_names)
    generate_package_config_file_beginning(${package_config_file} ${export_names})
    generate_package_config_file_end(${package_config_file} ${package_name})
endfunction()

function(install_cmake_uninstall_script install_cmake_package_dir)
    # Args:
    set(options "ALL")
    set(params "")
    set(lists "")
    # Parse args:
    cmake_parse_arguments(PARSE_ARGV 1 "ARG" "${options}" "${params}" "${lists}")
    set(uninstall_script_code "
        message(STATUS \"Installing: \${CMAKE_INSTALL_PREFIX}/${install_cmake_package_dir}/cmake_uninstall.cmake\")
        if(DEFINED CMAKE_INSTALL_MANIFEST_FILES)
            set(uninstall_script \${CMAKE_INSTALL_PREFIX}/${install_cmake_package_dir}/cmake_uninstall.cmake)
            set(files \${CMAKE_INSTALL_MANIFEST_FILES} \${uninstall_script})
        ")
    if(ARG_ALL)
        string(APPEND uninstall_script_code "
            set(CMTK_INSTALL_FILES \${files} \${uninstall_script})
            ")
    else()
        string(APPEND uninstall_script_code "
            if(CMTK_INSTALL_FILES)
                list(REMOVE_ITEM files \${CMTK_INSTALL_FILES})
            endif()
            list(APPEND CMTK_INSTALL_FILES \${files} \${uninstall_script})
            ")
    endif()
    string(APPEND uninstall_script_code "
        list(APPEND CMAKE_INSTALL_MANIFEST_FILES \${uninstall_script})
        file(APPEND \${CMAKE_INSTALL_PREFIX}/${install_cmake_package_dir}/cmake_uninstall.cmake
        \"
        message(STATUS \\\"Uninstall ${PROJECT_NAME} v${PROJECT_VERSION} ${CMAKE_BUILD_TYPE}\\\")
        foreach(file \${files})
            while(NOT \\\${file} STREQUAL \${CMAKE_INSTALL_PREFIX})
                if(EXISTS \\\${file} OR IS_SYMLINK \\\${file})
                    if(IS_DIRECTORY \\\${file})
                        file(GLOB dir_files \\\${file}/*)
                        list(LENGTH dir_files number_of_files)
                        if(\\\${number_of_files} EQUAL 0)
                          message(STATUS \\\"Removing  dir: \\\${file}\\\")
                          file(REMOVE_RECURSE \\\${file})
                        endif()
                    else()
                        message(STATUS \\\"Removing file: \\\${file}\\\")
                        file(REMOVE \\\${file})
                    endif()
                endif()
                get_filename_component(file \\\${file} DIRECTORY)
            endwhile()
        endforeach()
        \"
        )
    else()
        message(ERROR \"cmake_uninstall.cmake script cannot be created!\")
    endif()
        ")
    install(CODE ${uninstall_script_code})
endfunction()
