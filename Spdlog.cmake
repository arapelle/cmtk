
include(${CMAKE_CURRENT_LIST_DIR}/Utility.cmake)

# set_SPDLOG_ACTIVE_LEVEL_ifndef()
function(set_SPDLOG_ACTIVE_LEVEL_ifndef)
  cmake_parse_arguments(PARSE_ARGV 1 "ARG" "" "" "TRACE;DEBUG;INFO")
  set_ifndef(ARG_DEBUG "Debug")
  set_ifndef(ARG_INFO "Release")
  if(NOT SPDLOG_ACTIVE_LEVEL)
        set(level "TRACE")
        if(CMAKE_BUILD_TYPE)
            if(CMAKE_BUILD_TYPE IN_LIST ARG_TRACE)
                set(level "SPDLOG_LEVEL_TRACE")
            elseif(CMAKE_BUILD_TYPE IN_LIST ARG_DEBUG)
                set(level "SPDLOG_LEVEL_DEBUG")
            elseif(CMAKE_BUILD_TYPE IN_LIST ARG_INFO)
                set(level "SPDLOG_LEVEL_INFO")
            endif()
        endif()
        set(SPDLOG_ACTIVE_LEVEL "${level}" CACHE STRING "Choose the level of logging.")
        set_property(CACHE SPDLOG_ACTIVE_LEVEL PROPERTY 
            STRINGS "SPDLOG_LEVEL_TRACE" "SPDLOG_LEVEL_DEBUG" "SPDLOG_LEVEL_INFO" "SPDLOG_LEVEL_WARN" 
                    "SPDLOG_LEVEL_ERROR" "SPDLOG_LEVEL_CRITICAL" "SPDLOG_LEVEL_OFF" )
    endif()
endfunction()

# target_SPDLOG_ACTIVE_LEVEL_definition()
function(target_SPDLOG_ACTIVE_LEVEL_definition target)
    list(SUBLIST ARGN 0 2 extra_args)
    list_nth_or_default(extra_args 0 "PRIVATE" scope)
    set(valid_scopes PUBLIC PRIVATE INTERFACE)
    if(NOT scope IN_LIST valid_scopes)
        message(FATAL_ERROR "Scope is not valid: {scope}. (Provide one of: ${valid_scopes}.)")
    endif()
    list_nth_or_default(extra_args 1 "${SPDLOG_ACTIVE_LEVEL}" SPDLOG_ACTIVE_LEVEL)
    fatal_ifndef("Variable SPDLOG_ACTIVE_LEVEL is not defined." SPDLOG_ACTIVE_LEVEL)
    target_compile_definitions(${target} ${scope} SPDLOG_ACTIVE_LEVEL=${SPDLOG_ACTIVE_LEVEL})
endfunction()
