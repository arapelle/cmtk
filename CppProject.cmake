
include(${CMAKE_CURRENT_LIST_DIR}/Project.cmake)

function(configure_headers return_var)
  include(GNUInstallDirs)
  cmake_parse_arguments(PARSE_ARGV 1 "ARG" "" "BASE_DIR;BINARY_BASE_DIR" "FILES")
  fatal_ifndef("You must provide files to configure (FILES)." ARG_FILES)
  set_ifndef(ARG_BASE_DIR ${CMAKE_INSTALL_INCLUDEDIR})
  set_ifndef(ARG_BINARY_BASE_DIR "${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_INSTALL_INCLUDEDIR}")
  configure_files(configured_files BASE_DIR "${ARG_BASE_DIR}" BINARY_BASE_DIR "${ARG_BINARY_BASE_DIR}" FILES ${ARG_FILES})
  set(${return_var} "${configured_files}" PARENT_SCOPE)
endfunction()

function(configure_sources return_var)
  cmake_parse_arguments(PARSE_ARGV 1 "ARG" "" "BASE_DIR;BINARY_BASE_DIR" "FILES")
  fatal_ifndef("You must provide files to configure (FILES)." ARG_FILES)
  set_ifndef(ARG_BASE_DIR "src")
  set_ifndef(ARG_BINARY_BASE_DIR "${CMAKE_CURRENT_BINARY_DIR}/src")
  configure_files(configured_files BASE_DIR "${ARG_BASE_DIR}" BINARY_BASE_DIR "${ARG_BINARY_BASE_DIR}" FILES ${ARG_FILES})
  set(${return_var} "${configured_files}" PARENT_SCOPE)
endfunction()

function(cxx_standard_option cxx_std_var_name)
    # Args:
    set(options "")
    set(params "MIN;MAX;DEFAULT")
    set(lists "")
    # Parse args:
    cmake_parse_arguments(PARSE_ARGV 0 "ARG" "${options}" "${params}" "${lists}")
    # Check args:
    set(cxx_stds "98" "11" "14" "17" "20" "23" "26")
    ## default MIN & MAX
    list(GET cxx_stds 0 default_min)
    list(LENGTH cxx_stds nb_cxx_stds)
    math(EXPR last_index "${nb_cxx_stds} - 1")
    list(GET cxx_stds ${last_index} default_max)
    set_ifndef(ARG_MIN ${default_min})
    set_ifndef(ARG_MAX ${default_max})
    ## check MIN
    list(FIND cxx_stds ${ARG_MIN} min_index)
    if(${min_index} EQUAL -1)
      message(FATAL_ERROR "MIN must be one of the following values: ${cxx_stds}. MIN=${ARG_MIN}.")
    endif()
    ## check MAX
    list(FIND cxx_stds ${ARG_MAX} max_index)
    if(${max_index} EQUAL -1)
      message(FATAL_ERROR "MAX must be one of the following values: ${cxx_stds}. MAX=${ARG_MAX}.")
    endif()
    ## check MIN younger or equal to MAX
    if(${min_index} GREATER ${max_index})
      message(FATAL_ERROR "MIN must be younger or equal to MAX: MIN=${ARG_MIN}, MAX=${ARG_MAX}.")
    endif()
    ## list C++ standard choices
    set(choices)
    foreach(cxx_std ${cxx_stds})
      list(FIND cxx_stds ${cxx_std} cxx_std_index)
      if(${cxx_std_index} GREATER_EQUAL ${min_index} AND ${cxx_std_index} LESS_EQUAL ${max_index})
        list(APPEND choices "${cxx_std}")
      endif()
    endforeach()
    ## default DEFAULT
    if(${CMAKE_CXX_STANDARD})
      set_ifndef(ARG_DEFAULT ${CMAKE_CXX_STANDARD})
    else()
      set_ifndef(ARG_DEFAULT ${ARG_MIN})
    endif()
    ## check DEFAULT
    if(NOT ${ARG_DEFAULT} IN_LIST choices)
      message(FATAL_ERROR "DEFAULT must be one of the following values: ${choices}. DEFAULT=${ARG_DEFAULT}.")
    endif()
    # define C++ standard option OR check the already set value
    if(NOT DEFINED ${cxx_std_var_name})
      set(${cxx_std_var_name} "${ARG_DEFAULT}" CACHE STRING "Choose the C++ standard among: ${choices}." FORCE)
      set_property(CACHE ${cxx_std_var_name} PROPERTY STRINGS ${choices})
    else()
      list(FIND cxx_stds ${${cxx_std_var_name}} cache_var_index)
      if(${min_index} GREATER ${cache_var_index})
        message(FATAL_ERROR "${cxx_std_var_name} must be older or equal to MIN: MIN=${ARG_MIN}, ${cxx_std_var_name}=${${cxx_std_var_name}}.")
      endif()
      if(${max_index} LESS ${cache_var_index})
        message(FATAL_ERROR "${cxx_std_var_name} must be younger or equal to MAX: MAX=${ARG_MAX}, ${cxx_std_var_name}=${${cxx_std_var_name}}.")
      endif()
    endif()
endfunction()

function(target_default_warning_options target)
  if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
      target_compile_options(${target} PRIVATE /Wall)
  elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
      target_compile_options(${target} PRIVATE -Wall -Wextra -pedantic -Wshadow -Wmisleading-indentation -Wold-style-cast)
  endif()
endfunction()

function(target_default_error_options target)
  if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
      target_compile_options(${target} PRIVATE -pedantic-errors -Werror=old-style-cast)
  endif()
endfunction()

macro(add_test_subdirectory_if_build dir_name)
  cmake_parse_arguments("M_ARG" "" "NAME;BUILD_OPTION_NAME;BUILD_OPTION_MSG;BUILD_OPTION_DEFAULT" "" ${ARGN})
  set_ifndef(M_ARG_NAME "${PROJECT_NAME}")
  if(NOT M_ARG_BUILD_OPTION_NAME)
    make_upper_c_identifier("${M_ARG_NAME}" upper_var_name)
    set(M_ARG_BUILD_OPTION_NAME "BUILD_${upper_var_name}_TESTS")
  endif()
  set_ifndef(M_ARG_BUILD_OPTION_MSG "Build ${M_ARG_NAME} tests or not.")
  set_ifndef(M_ARG_BUILD_OPTION_DEFAULT OFF)
  fatal_if_none_of(M_ARG_BUILD_OPTION_DEFAULT "ON" "OFF")
  option(${M_ARG_BUILD_OPTION_NAME} ${M_ARG_BUILD_OPTION_MSG} ${M_ARG_BUILD_OPTION_DEFAULT})
  if(${M_ARG_BUILD_OPTION_NAME})
    include(CTest)
    if(BUILD_TESTING)
      add_subdirectory(${dir_name})
    endif()
  endif()
endmacro()

macro(add_example_subdirectory_if_build dir_name)
  cmake_parse_arguments("M_ARG" "" "NAME;BUILD_OPTION_NAME;BUILD_OPTION_MSG;BUILD_OPTION_DEFAULT" "" ${ARGN})
  set_ifndef(M_ARG_NAME "${PROJECT_NAME}")
  if(NOT M_ARG_BUILD_OPTION_NAME)
    make_upper_c_identifier("${M_ARG_NAME}" upper_var_name)
    set(M_ARG_BUILD_OPTION_NAME "BUILD_${upper_var_name}_EXAMPLES")
  endif()
  set_ifndef(M_ARG_BUILD_OPTION_MSG "Build ${M_ARG_NAME} examples or not.")
  set_ifndef(M_ARG_BUILD_OPTION_DEFAULT OFF)
  fatal_if_none_of(M_ARG_BUILD_OPTION_DEFAULT "ON" "OFF")
  option(${M_ARG_BUILD_OPTION_NAME} ${M_ARG_BUILD_OPTION_MSG} ${M_ARG_BUILD_OPTION_DEFAULT})
  if(${M_ARG_BUILD_OPTION_NAME})
    add_subdirectory(${dir_name})
  endif()
endmacro()

function(copy_runtime_dlls_if_win32 target_name)
  if(WIN32)
    cmake_parse_arguments("M_ARG" "" "RUNTIME_OUTPUT_SUBDIRECTORY" "" ${ARGN})
    if(DEFINED M_ARG_RUNTIME_OUTPUT_SUBDIRECTORY)
      set_target_properties(${target_name} PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/${M_ARG_RUNTIME_OUTPUT_SUBDIRECTORY}")
    endif()
    add_custom_command(TARGET ${target_name} POST_BUILD 
        COMMAND ${CMAKE_COMMAND} -E touch $<TARGET_FILE_DIR:${target_name}>/.dummy.txt
        COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_RUNTIME_DLLS:${target_name}> $<TARGET_FILE_DIR:${target_name}>/.dummy.txt $<TARGET_FILE_DIR:${target_name}>
        COMMAND_EXPAND_LISTS)
  endif()
endfunction()
