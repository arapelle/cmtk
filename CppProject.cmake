
include(${CMAKE_CURRENT_LIST_DIR}/Project.cmake)

function(configure_headers return_var)
  include(GNUInstallDirs)
  cmake_parse_arguments(PARSE_ARGV 1 "ARG" "" "BASE_DIR;BINARY_BASE_DIR" "FILES")
  fatal_ifndef("You must provide files to configure (FILES)." ARG_FILES)
  set_ifndef(ARG_BASE_DIR ${CMAKE_INSTALL_INCLUDEDIR})
  set_ifndef(ARG_BINARY_BASE_DIR "${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_INSTALL_INCLUDEDIR}")
  configure_files(configured_files BASE_DIR "${ARG_BASE_DIR}" BINARY_BASE_DIR "${ARG_BINARY_BASE_DIR}" FILES ${ARG_FILES})
  set(${return_var} "${configured_files}" PARENT_SCOPE)
endfunction()

function(configure_sources return_var)
  cmake_parse_arguments(PARSE_ARGV 1 "ARG" "" "BASE_DIR;BINARY_BASE_DIR" "FILES")
  fatal_ifndef("You must provide files to configure (FILES)." ARG_FILES)
  set_ifndef(ARG_BASE_DIR "src")
  set_ifndef(ARG_BINARY_BASE_DIR "${CMAKE_CURRENT_BINARY_DIR}/src")
  configure_files(configured_files BASE_DIR "${ARG_BASE_DIR}" BINARY_BASE_DIR "${ARG_BINARY_BASE_DIR}" FILES ${ARG_FILES})
  set(${return_var} "${configured_files}" PARENT_SCOPE)
endfunction()

function(target_default_warning_options target)
  if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
      target_compile_options(${target} PRIVATE /Wall)
  elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
      target_compile_options(${target} PRIVATE -Wall -Wextra -pedantic -Wshadow -Wmisleading-indentation -Wold-style-cast)
  endif()
endfunction()

function(target_default_error_options target)
  if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
      target_compile_options(${target} PRIVATE -pedantic-errors -Werror=old-style-cast)
  endif()
endfunction()

macro(add_test_subdirectory_if_build dir_name)
  cmake_parse_arguments("M_ARG" "" "NAME;BUILD_OPTION_NAME;BUILD_OPTION_MSG;BUILD_OPTION_DEFAULT" "" ${ARGN})
  set_ifndef(M_ARG_NAME "${PROJECT_NAME}")
  if(NOT M_ARG_BUILD_OPTION_NAME)
    make_upper_c_identifier("${M_ARG_NAME}" upper_var_name)
    set(M_ARG_BUILD_OPTION_NAME "BUILD_${upper_var_name}_TESTS")
  endif()
  set_ifndef(M_ARG_BUILD_OPTION_MSG "Build ${M_ARG_NAME} tests or not.")
  set_ifndef(M_ARG_BUILD_OPTION_DEFAULT OFF)
  fatal_if_none_of(M_ARG_BUILD_OPTION_DEFAULT "ON" "OFF")
  option(${M_ARG_BUILD_OPTION_NAME} ${M_ARG_BUILD_OPTION_MSG} ${M_ARG_BUILD_OPTION_DEFAULT})
  if(${M_ARG_BUILD_OPTION_NAME})
    include(CTest)
    if(BUILD_TESTING)
      add_subdirectory(${dir_name})
    endif()
  endif()
endmacro()

macro(add_example_subdirectory_if_build dir_name)
  cmake_parse_arguments("M_ARG" "" "NAME;BUILD_OPTION_NAME;BUILD_OPTION_MSG;BUILD_OPTION_DEFAULT" "" ${ARGN})
  set_ifndef(M_ARG_NAME "${PROJECT_NAME}")
  if(NOT M_ARG_BUILD_OPTION_NAME)
    make_upper_c_identifier("${M_ARG_NAME}" upper_var_name)
    set(M_ARG_BUILD_OPTION_NAME "BUILD_${upper_var_name}_EXAMPLES")
  endif()
  set_ifndef(M_ARG_BUILD_OPTION_MSG "Build ${M_ARG_NAME} examples or not.")
  set_ifndef(M_ARG_BUILD_OPTION_DEFAULT OFF)
  fatal_if_none_of(M_ARG_BUILD_OPTION_DEFAULT "ON" "OFF")
  option(${M_ARG_BUILD_OPTION_NAME} ${M_ARG_BUILD_OPTION_MSG} ${M_ARG_BUILD_OPTION_DEFAULT})
  if(${M_ARG_BUILD_OPTION_NAME})
    add_subdirectory(${dir_name})
  endif()
endmacro()

function(copy_runtime_dlls_if_win32 target_name)
  if(WIN32)
    cmake_parse_arguments("M_ARG" "" "RUNTIME_OUTPUT_SUBDIRECTORY" "" ${ARGN})
    if(DEFINED M_ARG_RUNTIME_OUTPUT_SUBDIRECTORY)
      set_target_properties(${target_name} PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/${M_ARG_RUNTIME_OUTPUT_SUBDIRECTORY}")
    endif()
    add_custom_command(TARGET ${target_name} POST_BUILD 
        COMMAND ${CMAKE_COMMAND} -E touch $<TARGET_FILE_DIR:${target_name}>/.dummy.txt
        COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_RUNTIME_DLLS:${target_name}> $<TARGET_FILE_DIR:${target_name}>/.dummy.txt $<TARGET_FILE_DIR:${target_name}>
        COMMAND_EXPAND_LISTS)
  endif()
endfunction()
