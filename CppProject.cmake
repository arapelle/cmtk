
include(${CMAKE_CURRENT_LIST_DIR}/Project.cmake)

function(configure_headers return_var)
  include(GNUInstallDirs)
  cmake_parse_arguments(PARSE_ARGV 1 "ARG" "" "BASE_DIR;BINARY_BASE_DIR" "FILES")
  fatal_ifndef("You must provide files to configure (FILES)." ARG_FILES)
  set_ifndef(ARG_BASE_DIR ${CMAKE_INSTALL_INCLUDEDIR})
  set_ifndef(ARG_BINARY_BASE_DIR "${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_INSTALL_INCLUDEDIR}")
  configure_files(configured_files BASE_DIR "${ARG_BASE_DIR}" BINARY_BASE_DIR "${ARG_BINARY_BASE_DIR}" FILES ${ARG_FILES})
  set(${return_var} "${configured_files}" PARENT_SCOPE)
endfunction()

function(configure_sources return_var)
  cmake_parse_arguments(PARSE_ARGV 1 "ARG" "" "BASE_DIR;BINARY_BASE_DIR" "FILES")
  fatal_ifndef("You must provide files to configure (FILES)." ARG_FILES)
  set_ifndef(ARG_BASE_DIR "src")
  set_ifndef(ARG_BINARY_BASE_DIR "${CMAKE_CURRENT_BINARY_DIR}/src")
  configure_files(configured_files BASE_DIR "${ARG_BASE_DIR}" BINARY_BASE_DIR "${ARG_BINARY_BASE_DIR}" FILES ${ARG_FILES})
  set(${return_var} "${configured_files}" PARENT_SCOPE)
endfunction()

function(cxx_standard_option cxx_std_var_name)
    # Args:
    set(options "")
    set(params "MIN;MAX;DEFAULT")
    set(lists "")
    # Parse args:
    cmake_parse_arguments(PARSE_ARGV 0 "ARG" "${options}" "${params}" "${lists}")
    # Check args:
    set(cxx_stds "98" "11" "14" "17" "20" "23" "26")
    ## default MIN & MAX
    list(GET cxx_stds 0 default_min)
    list(LENGTH cxx_stds nb_cxx_stds)
    math(EXPR last_index "${nb_cxx_stds} - 1")
    list(GET cxx_stds ${last_index} default_max)
    set_ifndef(ARG_MIN ${default_min})
    set_ifndef(ARG_MAX ${default_max})
    ## check MIN
    list(FIND cxx_stds ${ARG_MIN} min_index)
    if(${min_index} EQUAL -1)
      message(FATAL_ERROR "MIN must be one of the following values: ${cxx_stds}. MIN=${ARG_MIN}.")
    endif()
    ## check MAX
    list(FIND cxx_stds ${ARG_MAX} max_index)
    if(${max_index} EQUAL -1)
      message(FATAL_ERROR "MAX must be one of the following values: ${cxx_stds}. MAX=${ARG_MAX}.")
    endif()
    ## check MIN younger or equal to MAX
    if(${min_index} GREATER ${max_index})
      message(FATAL_ERROR "MIN must be younger or equal to MAX: MIN=${ARG_MIN}, MAX=${ARG_MAX}.")
    endif()
    ## list C++ standard choices
    set(choices)
    foreach(cxx_std ${cxx_stds})
      list(FIND cxx_stds ${cxx_std} cxx_std_index)
      if(${cxx_std_index} GREATER_EQUAL ${min_index} AND ${cxx_std_index} LESS_EQUAL ${max_index})
        list(APPEND choices "${cxx_std}")
      endif()
    endforeach()
    ## default DEFAULT
    if(${CMAKE_CXX_STANDARD})
      set_ifndef(ARG_DEFAULT ${CMAKE_CXX_STANDARD})
    else()
      set_ifndef(ARG_DEFAULT ${ARG_MIN})
    endif()
    ## check DEFAULT
    if(NOT ${ARG_DEFAULT} IN_LIST choices)
      message(FATAL_ERROR "DEFAULT must be one of the following values: ${choices}. DEFAULT=${ARG_DEFAULT}.")
    endif()
    # define C++ standard option OR check the already set value
    if(NOT DEFINED ${cxx_std_var_name})
      set(${cxx_std_var_name} "${ARG_DEFAULT}" CACHE STRING "Choose the C++ standard among: ${choices}." FORCE)
      set_property(CACHE ${cxx_std_var_name} PROPERTY STRINGS ${choices})
    else()
      list(FIND cxx_stds ${${cxx_std_var_name}} cache_var_index)
      if(${min_index} GREATER ${cache_var_index})
        message(FATAL_ERROR "${cxx_std_var_name} must be older or equal to MIN: MIN=${ARG_MIN}, ${cxx_std_var_name}=${${cxx_std_var_name}}.")
      endif()
      if(${max_index} LESS ${cache_var_index})
        message(FATAL_ERROR "${cxx_std_var_name} must be younger or equal to MAX: MAX=${ARG_MAX}, ${cxx_std_var_name}=${${cxx_std_var_name}}.")
      endif()
    endif()
endfunction()

function(target_default_warning_options target)
  if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
      target_compile_options(${target} PRIVATE /Wall)
  elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
      target_compile_options(${target} PRIVATE -Wall -Wextra -pedantic -Wshadow -Wmisleading-indentation -Wold-style-cast)
  endif()
endfunction()

function(target_default_error_options target)
  if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
      target_compile_options(${target} PRIVATE -pedantic-errors -Werror=old-style-cast)
  endif()
endfunction()

function(_cmtk_build_option suffix desc)
  cmake_parse_arguments(PARSE_ARGV 2 "ARG" "" "NAME;PROJECT_NAME;NAMESPACE;OPTION_NAME;OPTION_MSG;OPTION_DEFAULT;OUT_VAR" "")
  if(ARG_NAME)
    fatal_ifdef("Do not provide PROJECT_NAME or NAMESPACE with NAME." ARG_PROJECT_NAME ARG_NAMESPACE)
    set(full_name "${ARG_NAME}")
  else()
    fatal_ifdef("Do not provide NAME with PROJECT_NAME or NAMESPACE." ARG_NAME)
    set_ifndef(ARG_PROJECT_NAME "${PROJECT_NAME}")
    set_ifndef(ARG_NAMESPACE "${PACKAGE_NAME}")
    if(NOT "${ARG_NAMESPACE}" STREQUAL "")
      set(full_name "${ARG_NAMESPACE}::${ARG_PROJECT_NAME}")
    else()
      set(full_name "${ARG_PROJECT_NAME}")
    endif()
  endif()
  if(NOT ARG_OPTION_NAME)
    if(ARG_NAME)
      make_upper_c_identifier("${ARG_NAME}" opt_name)
    else()
      make_upper_c_identifier("${ARG_NAMESPACE}" upper_var_namespace)
      make_upper_c_identifier("${ARG_PROJECT_NAME}" upper_var_pname)
      if(NOT "${upper_var_namespace}" STREQUAL "")
        set(opt_name "${upper_var_namespace}_${upper_var_pname}")
      else()
        set(opt_name "${upper_var_pname}")
      endif()
    endif()
    set(ARG_OPTION_NAME "BUILD_${opt_name}${suffix}")
  endif()
  set_ifndef(ARG_OPTION_MSG "Build ${full_name}${desc} or not.")
  set_ifndef(ARG_OPTION_DEFAULT OFF)
  fatal_if_none_of(ARG_OPTION_DEFAULT "ON" "OFF")
  option(${ARG_OPTION_NAME} ${ARG_OPTION_MSG} ${ARG_OPTION_DEFAULT})
  if(ARG_OUT_VAR)
    set(${ARG_OUT_VAR} ${${ARG_OPTION_NAME}} PARENT_SCOPE)
  endif()
endfunction()

macro(build_option)
    _cmtk_build_option("" "" ${ARGV})
endmacro()

macro(build_tests_option)
    include(CTest)
    _cmtk_build_option("_TESTS" " tests" ${ARGV})
endmacro()

macro(build_examples_option)
    _cmtk_build_option("_EXAMPLES" " examples" ${ARGV})
endmacro()

macro(add_test_subdirectory_if_build dir_name)
  build_tests_option(${ARGN} OUT_VAR opt_value)
  if(${opt_value})
    if(BUILD_TESTING)
      add_subdirectory(${dir_name})
    endif()
  endif()
endmacro()

macro(add_example_subdirectory_if_build dir_name)
  build_examples_option(${ARGN} OUT_VAR opt_value)
  if(${opt_value})
    add_subdirectory(${dir_name})
  endif()
endmacro()

function(copy_runtime_dlls_if_win32 target_name)
  if(WIN32)
    cmake_parse_arguments("M_ARG" "" "RUNTIME_OUTPUT_SUBDIRECTORY" "" ${ARGN})
    if(DEFINED M_ARG_RUNTIME_OUTPUT_SUBDIRECTORY)
      set_target_properties(${target_name} PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/${M_ARG_RUNTIME_OUTPUT_SUBDIRECTORY}")
    endif()
    add_custom_command(TARGET ${target_name} POST_BUILD 
        COMMAND ${CMAKE_COMMAND} -E touch $<TARGET_FILE_DIR:${target_name}>/.dummy.txt
        COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_RUNTIME_DLLS:${target_name}> $<TARGET_FILE_DIR:${target_name}>/.dummy.txt $<TARGET_FILE_DIR:${target_name}>
        COMMAND_EXPAND_LISTS)
  endif()
endfunction()
