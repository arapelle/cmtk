
macro(fatal_ifdef msg)
  foreach(var IN ITEMS ${ARGN})
    if(DEFINED ${var})
      message(FATAL_ERROR "${msg}")
    endif()
  endforeach()
endmacro()

macro(fatal_ifndef msg)
  foreach(var IN ITEMS ${ARGN})
    if(NOT DEFINED ${var})
      message(FATAL_ERROR "${msg}")
    endif()
  endforeach()
endmacro()

function(fatal_if_none_is_def msg)
  foreach(var IN ITEMS ${ARGN})
    if(DEFINED ${var})
      return()
    endif()
  endforeach()
  message(FATAL_ERROR "${msg}")
endfunction()

macro(set_ifndef var_name value)
  if(NOT DEFINED ${var_name})
    set(${var_name} ${value})
  endif()
endmacro()

macro(set_iftest var)
  set(lists "IF;THEN;ELSE")
  cmake_parse_arguments("ARG" "" "" "${lists}" ${ARGN})
  fatal_ifndef("IF is required and contains the test expression." ARG_IF)
  fatal_ifndef("THEN is required and contains the value if the test expression is valid" ARG_THEN)
  if(${ARG_IF})
    set(${var} ${ARG_THEN})
  elseif(DEFINED ARG_ELSE)
    set(${var} ${ARG_ELSE})
  endif()
endmacro()

function(trioption varname help_text initial)
  set(${varname} "${initial}" CACHE STRING "${help_text}")
  set_property(CACHE ${varname} PROPERTY STRINGS "ON" "OFF" "UNDEFINED")
endfunction()

function(option_or_set_ifdef variable help_text initial ascendant_variable)
  if(NOT DEFINED ${ascendant_variable} OR "${${ascendant_variable}}" STREQUAL "UNDEFINED")
    option(${variable} "${help_text}" ${initial})
  else()
    set(${variable} ${${ascendant_variable}} PARENT_SCOPE)
  endif()
endfunction()

function(trioption_or_set_ifdef variable help_text initial ascendant_variable)
  if(NOT DEFINED ${ascendant_variable} OR "${${ascendant_variable}}" STREQUAL "UNDEFINED")
    set(${variable} "${initial}" CACHE STRING "${help_text}")
    set_property(CACHE ${variable} PROPERTY STRINGS "ON" "OFF" "UNDEFINED")
  else()
    set(${variable} ${${ascendant_variable}} PARENT_SCOPE)
  endif()
endfunction()


macro(make_lower_c_identifier str return_var)
  string(MAKE_C_IDENTIFIER ${str} ${return_var})
  string(TOLOWER ${${return_var}} ${return_var})
endmacro()

macro(make_upper_c_identifier str return_var)
  string(MAKE_C_IDENTIFIER ${str} ${return_var})
  string(TOUPPER ${${return_var}} ${return_var})
endmacro()
